#!/usr/bin/env python3

import argparse
import subprocess
import os
import sys
import argcomplete
import importlib.util

ROOT_DIR = os.path.expanduser("~")

# --- Helper Functions for Build Process ---
def _build_docker_image(image_name: str, context_path: str, dockerfile_path: str) -> bool:
    print(f"  Building Docker image: {image_name}...")
    config_path = os.path.expanduser("~/.docker/config.json")
    if os.path.exists(config_path):
        try:
            print("  Removing ~/.docker/config.json to prevent authentication errors...")
            subprocess.run(["rm", "-f", config_path], check=True)
            print("  Successfully removed config.json.")
        except Exception as e:
            print(f"  Warning: Could not remove config.json: {e}", file=sys.stderr)
    try:
        subprocess.run(["docker", "build", "-t", image_name, "-f", dockerfile_path, context_path], check=True)
        print(f"Successfully built {image_name} image.")
        return True
    except subprocess.CalledProcessError as e:
        print(f"Failed to build {image_name} image: {e}", file=sys.stderr)
        return False
    except Exception as e:
        print(f"An unexpected error occurred during Docker image build: {e}", file=sys.stderr)
        return False

def get_environment_type(root_dir: str) -> str:
    env_config_path = os.path.join(root_dir, ".clab_env")
    if os.path.exists(env_config_path):
        with open(env_config_path, 'r') as f:
            env_type = f.readline().strip()
            if env_type:
                print(f"Inferred environment type from {env_config_path}: '{env_type}'")
                return env_type
    
    print(f"Warning: .clab_env not found or empty in {root_dir}. Defaulting to 'p4'. "
          "Consider creating a .clab_env file in your repository root with your environment type (e.g., 'p4' or 'custom').", file=sys.stderr)
    return "p4"

def execute_environment_build_steps(env_type: str, root_dir: str) -> tuple[bool, str, str]:
    print(f"Executing build steps for environment type: {env_type}...")
    try:
        script_dir = root_dir
        build_configs_path = os.path.join(script_dir, "build_configs.py")

        spec = importlib.util.spec_from_file_location("build_configs", build_configs_path)
        if spec is None:
            print(f"Error: build_configs.py not found at {build_configs_path}.", file=sys.stderr)
            return False, "", ""
        build_configs = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(build_configs)

        build_function_name = f"build_{env_type}_components"
        if hasattr(build_configs, build_function_name):
            build_func = getattr(build_configs, build_function_name)
            success, dockerfile_path, context_path = build_func(f"{root_dir}/repos")
            if not success:
                print(f"Error: Component build for '{env_type}' failed.", file=sys.stderr)
                return False, "", ""
            return True, dockerfile_path, context_path
        else:
            print(f"Error: Build function '{build_function_name}' not found in build_configs.py. "
                  f"Please define 'def {build_function_name}(root_dir):' in build_configs.py.", file=sys.stderr)
            return False, "", ""
    except FileNotFoundError:
        print(f"Error: build_configs.py not found at {build_configs_path}. Please create it.", file=sys.stderr)
        return False, "", ""
    except Exception as e:
        print(f"An unexpected error occurred during environment build steps: {e}", file=sys.stderr)
        return False, "", ""

def _check_and_build_image_if_needed(root_dir: str) -> None:
    env_type = get_environment_type(root_dir)
    image_name = f"{env_type}-clab-node"
    print(f"Checking for Docker image: {image_name}...")
    result = subprocess.run(["docker", "images", "-q", image_name], capture_output=True, text=True)
    if not result.stdout.strip():
        print(f"{image_name} not found. Building now...")
        success, dockerfile_path, context_path = execute_environment_build_steps(env_type, root_dir)
        if not success:
            sys.exit(1)
        
        if not _build_docker_image(image_name, context_path, dockerfile_path):
            sys.exit(1)
    else:
        print(f"{image_name} image already exists. Skipping build.")


def main():
    parser = argparse.ArgumentParser(
        description="Manage containerlab topologies and various environment-specific Docker images.",
        formatter_class=argparse.RawTextHelpFormatter
    )

    subparsers = parser.add_subparsers(dest="subcommand", help="Available subcommands")

    start_parser = subparsers.add_parser(
        "start",
        help="Deploy containerlab topology. Builds image if not present.",
        epilog="Example: clab start my_topology.yml --network host"
    )
    start_parser.add_argument(
        "topology_file",
        help="Path to the containerlab topology file (e.g., my_topology.yml)"
    ).completer = argcomplete.FilesCompleter(allowednames=['.yml', '.yaml'])

    start_parser.add_argument(
        "clab_args",
        nargs=argparse.REMAINDER,
        help="Additional arguments to pass to 'containerlab deploy'"
    )

    stop_parser = subparsers.add_parser(
        "stop",
        help="Destroy containerlab topology.",
        epilog="Example: clab stop my_topology.yml"
    )
    stop_parser.add_argument(
        "topology_file",
        help="Path to the containerlab topology file (e.g., my_topology.yml)"
    ).completer = argcomplete.FilesCompleter(allowednames=['.yml', '.yaml'])

    stop_parser.add_argument(
        "clab_args",
        nargs=argparse.REMAINDER,
        help="Additional arguments to pass to 'containerlab destroy'"
    )

    image_parser = subparsers.add_parser(
        "image",
        help="Manage containerlab Docker images."
    )
    image_subparsers = image_parser.add_subparsers(
        dest="image_subcommand",
        help="Image management subcommands"
    )

    image_build_parser = image_subparsers.add_parser(
        "build",
        help="Build the containerlab image for the current environment."
    )

    image_rm_parser = image_subparsers.add_parser(
        "rm",
        help="Remove the containerlab image for the current environment."
    )

    argcomplete.autocomplete(parser)

    args = parser.parse_args()

    current_env_type = get_environment_type(ROOT_DIR)

    if args.subcommand == "start":
        _check_and_build_image_if_needed(ROOT_DIR)
        print("Deploying containerlab topology...")
        clab_cmd = ["containerlab", "deploy", args.topology_file, "--skip-post-deploy"] + args.clab_args
        try:
            subprocess.run(clab_cmd, check=True)
        except subprocess.CalledProcessError as e:
            print(f"Error deploying topology: {e}", file=sys.stderr)
            sys.exit(1)
    elif args.subcommand == "stop":
        print("Destroying containerlab topology...")
        clab_cmd = ["containerlab", "destroy", args.topology_file] + args.clab_args
        try:
            subprocess.run(clab_cmd, check=True)
        except subprocess.CalledProcessError as e:
            print(f"Error destroying topology: {e}", file=sys.stderr)
            sys.exit(1)
    elif args.subcommand == "image":
        if args.image_subcommand == "build":
            _check_and_build_image_if_needed(ROOT_DIR)
        elif args.image_subcommand == "rm":
            image_name = f"{current_env_type}-clab-node"
            print(f"Removing Docker image: {image_name}...")
            try:
                subprocess.run(["docker", "rmi", image_name], check=True)
                print(f"Successfully removed {image_name} image.")
            except subprocess.CalledProcessError as e:
                if "No such image" in e.stderr:
                    print(f"{image_name} not found. Nothing to remove.")
                else:
                    print(f"Failed to remove {image_name} image: {e}", file=sys.stderr)
                    sys.exit(1)
        else:
            image_parser.print_help()
    else:
        parser.print_help()

if __name__ == "__main__":
    main()
